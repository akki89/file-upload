var redis = require('redis') ;
var kue   = require('kue') ;

function NRedisPubSub(options) {
    if (!(this instanceof NRedisPubSub)) return new NRedisPubSub(options);

    var self=this;

    var port = options && options.port || 6379;   // 6379 is Redis' default
    var host = options && options.host || '127.0.0.1';
    var auth = options && options.auth

    var defaultConfig = {
        retry_max_delay: 10000,
        max_attempts: 10000,
        no_ready_check: true
    } ;

    options = options || {} ;
    this.pubRedis = redis.createClient(port, host, defaultConfig) ;
    this.subRedis = redis.createClient(port, host, defaultConfig) ;

    this.pubRedis.on('error', function(e) { console.log(e) ; } ) ;
    this.pubRedis.on('ready', function() { self._connected++ ; }) ;
    this.pubRedis.on('end', function() { self.connected--; }) ;

    this.subRedis.on('error', function(e) { console.log(e) ; } ) ;
    this.subRedis.on('ready', function() { self._connected++ ; }) ;
    this.subRedis.on('end', function() { self.connected--; }) ;

    if (auth) {
        this.subRedis.auth(auth)
        this.pubRedis.auth(auth)
    }

    this.prefix = options.scope ? options.scope + ':' : '';

    // create kue queue (persistent worker queue)
    this.q = kue.createQueue({
        prefix: options && options.prefix || 'q',
        redis: {
            port: port,
            host: host,
            auth: auth
        }
    }) ;
}



NRedisPubSub.prototype.quit = function() {
    this.subRedis.quit();
    this.pubRedis.quit();
}

NRedisPubSub.prototype.on = function(channel, handler, cb) {
  var callback = cb || function () {},
      self = this ;

  this.subRedis.on('pmessage', function (pattern, _channel, message) {
    if (self.prefix + channel === pattern) {
        var data = {
            event: _channel,
            payload: JSON.parse(message)
        }
        handler(data) ;
    }
  });

  this.subRedis.psubscribe(this.prefix + channel, callback);
};

NRedisPubSub.prototype.process = function( name, cbCount, countCb ) {
    this.q.process( name, cbCount, countCb ) ;
}


NRedisPubSub.prototype.fire = function( channel, message ) {
    this.emit( channel, message ) ;
    this.enqueue( channel, message ) ;
}


NRedisPubSub.prototype.emit = function (channel, message) {
  this.pubRedis.publish(this.prefix + channel, JSON.stringify(message));
};

NRedisPubSub.prototype.enqueue = function( queueName, data ) {
    this.q.create(queueName, data).attempts(3).save() ;
}


module.exports = NRedisPubSub;
